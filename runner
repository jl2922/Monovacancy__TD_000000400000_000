#!/usr/bin/env python
"""
Vacancy Formation and Migration Test Driver
Works for Both Common Cubic and HCP Crystals, at 0 K and 0 GPa

This test driver first performs calculation with several fixed size supercells,
then extrapolates these results to obtain the dilute limit.
Migration is obtained with nudged elastic band method.

Author: Junhao Li <streaver91@gmail.com>
"""
# Python Modules
import re
import json
import os

# Vacancy driver modules
import config as C
import functions as F
from vacancy import Vacancy

# Generate OrderedDict for all properties to report.
def packResult(result, configs):
    print '[Packing results]'
    instanceId = 1 # Instance id start from 1.
    driverPath = os.path.dirname(os.path.abspath(__file__))
    instances = []

    # Loop through each property definition.
    for definition in C.PROPERTY_DEFINITIONS:
        print 'packing results for: ' + definition
        instance = {
            'instance-id': instanceId
        }

        with open(driverPath + ('/definitions/%s.edn' % definition), 'r') as f:
            content = f.read()
            # Obtain property id.
            properties = re.search('property-id\" \"([^\"]+)\"', content, re.M)
            propertyId = properties.group(1)
            instance['property-id'] = propertyId
            # Obtain property keys
            properties = re.findall('\"([^\"]+)\" \{', content)
            for property in properties:
                propertyKey = property # corresponding key in res object.
                if property[:5] == 'host-':
                    propertyKey = property[5:]
                elif property[:10] == 'reservoir-':
                    propertyKey = property[10:]
                if propertyKey in result:
                    instance[property] = result[propertyKey]
                else:
                    print 'missing:', property

        if configs['OUTPUT_INSTANCES']:
            print 'results:'
            F.printDict(instance)

        instances.append(instance)
        instanceId += 1
    return instances

def main():
    F.clock('test begin')

    # Obtain raw inputs.
    elem = raw_input()
    lattice = raw_input()
    model = raw_input()
    latticeConstA = raw_input()
    latticeConstC = raw_input()
    testConfigs = raw_input()

    # Parse and output test config.
    testConfigs = json.loads(testConfigs)
    print "Test config:"
    print json.dumps(testConfigs, indent = 2)

    # Test configs overwrite driver default configs.
    configs = C.__dict__.copy() # C contains driver default configs.
    configs = dict((name, getattr(C, name)) for name in dir(C) if not name.startswith('__'))
    configs.update(testConfigs)
    print configs

    # If it's hcp crystal, process both a and c.
    # Otherwise, process a only.
    if lattice == 'hcp':
        latticeConsts = [float(latticeConstA), float(latticeConstC)]
    else:
        latticeConsts = [float(latticeConstA)]

    vacancy = Vacancy(elem, model, lattice, latticeConsts, configs)

    # Obtain Results and pack them into required format.
    vacancy.run()
    result = vacancy.getResult()
    instances = packResult(result, configs)

    # Output results.
    # Output pipeline edn 'json' file.
    instanceEdn = json.dumps(instances, separators = (' ', ' '), indent = 2)
    with open(os.path.abspath('output/results.edn'), 'w') as f:
        f.write(instanceEdn)
        
    # Output usual json file with all the information.
    if configs['SAVE_JSON']:
        resultJson = json.dumps(result, indent = 2)
        with open(os.path.abspath('output/summary.json'), 'w') as f:
            f.write(resultJson)

    F.clock('test completed')

if __name__ == '__main__':
    main()
